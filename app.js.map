{"version":3,"sources":["config.js","util.js","class.point.js","class.circle.js","main.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClfile":"app.js","sourcesContent":["// metaball experiment configuration\n\nconst SCALE = 3;\nconst SAMPLING = 2;\nconst CIRCLES_PROTOTYPE = [\n    { x: 18,  y: 12, r: 7  },\n    { x: 40,  y: 70, r: 14 },\n    { x: 50,  y: 26, r: 8  },\n    { x: 50,  y: 26, r: 8  },\n    { x: 68,  y: 66, r: 4  },\n    { x: 68,  y: 66, r: 4  },\n    { x: 120, y: 40, r: 26 },\n];\n","const reducerSum = function reducerSum(acc, a) {\n    return acc + a;\n};\n","class Point {\n\n    distanceTo(x, y) {\n        if (x instanceof Point) {\n            y = x.y;\n            x = x.x;\n        }\n        const deltaX = this.x - x;\n        const deltaY = this.y - y;\n        return Math.sqrt(deltaX ** 2 + deltaY ** 2);\n    }\n\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n}\n","class Circle extends Point {\n\n    _addHandlers(elControl, mouseMoveHandler) {\n        const mouseUpHandler = (event) => {\n            document.querySelector('.circle__control--hover')\n                .classList.remove('circle__control--hover');\n            draw();\n            window.removeEventListener('mousemove', mouseMoveHandler);\n            window.removeEventListener('mouseup', mouseUpHandler);\n        };\n        elControl.addEventListener('mousedown', (event) => {\n            event.currentTarget.classList.add('circle__control--hover');\n            const scaledX = event.clientX / currentArtboardScale;\n            const scaledY = event.clientY / currentArtboardScale;\n            this._dragStart = {\n                x: event.clientX,\n                y: event.clientY,\n                deltaX: scaledX - this.x,\n                deltaY: scaledY - this.y,\n                distance: this.distanceTo(scaledX, scaledY),\n                originalR: this.r / currentArtboardScale,\n            };\n            event.preventDefault();\n            window.addEventListener('mousemove', mouseMoveHandler);\n            window.addEventListener('mouseup', mouseUpHandler);\n        });\n    }\n\n    _resizeHandler(event) {\n        event.preventDefault();\n\n        const distance = this.distanceTo(\n            event.clientX / currentArtboardScale,\n            event.clientY / currentArtboardScale);\n        const scale = distance / this._dragStart.distance\n        this.r = currentArtboardScale * this._dragStart.originalR * scale;\n        this._updatePosition();\n    }\n\n    _moveHandler(event) {\n        event.preventDefault();\n        this.x = event.clientX / currentArtboardScale - this._dragStart.deltaX;\n        this.y = event.clientY / currentArtboardScale - this._dragStart.deltaY;\n        this._updatePosition();\n    }\n\n    _updatePosition() {\n        this.r = Math.min(256, Math.max(8, this.r));\n        const diameterPx = `${this.r * 2}px`;\n        this._el.circle.style.width = diameterPx;\n        this._el.circle.style.height = diameterPx;\n        this._el.circle.style.top = `${this.y}px`;\n        this._el.circle.style.left = `${this.x}px`;\n    }\n\n    constructor(x, y, r, elParent) {\n        super(x, y);\n        this.r = r;\n\n        // screw javascript\n        this._resizeHandlerBound = this._resizeHandler.bind(this);\n        this._moveHandlerBound = this._moveHandler.bind(this);\n\n        this._el = {};\n        this._el.circle = document.createElement('div');\n\n        const diameterPx = `${r * 2}px`;\n        this._el.circle.style.width = diameterPx;\n        this._el.circle.style.height = diameterPx;\n        this._el.circle.style.top = `${y}px`;\n        this._el.circle.style.left = `${x}px`;\n        this._el.circle.classList.add('circle');\n\n        this._el.resize = document.createElement('div');\n        this._el.resize.classList.add('circle__resize');\n        this._el.circle.appendChild(this._el.resize);\n\n        this._el.move = document.createElement('div');\n        this._el.move.classList.add('circle__move');\n        this._el.circle.appendChild(this._el.move);\n\n        this._addHandlers(this._el.resize, this._resizeHandler.bind(this));\n        this._addHandlers(this._el.move, this._moveHandler.bind(this));\n\n        if (elParent instanceof HTMLElement) {\n            elParent.appendChild(this._el.circle);\n        }\n    }\n\n}\n","// CONSTANTS\n\nconst TAU = 2 * Math.PI;\n\n// GLOBALS\n\nconst el = {};\nel.artboard = document.querySelector('.artboard');\nel.artboardInterface = document.querySelector('.artboard__interface');\nel.canvas = document.querySelector('canvas');\n\nlet currentArtboardScale = 1;\nconst uiCircles = [];\n\n// FUNCTIONS\n\nconst scaleCanvasToViewport = function scaleCanvasToViewport() {\n    let ratioWidth = (window.innerWidth - 16) / el.canvas.width;\n    let ratioHeight = (window.innerHeight - 16) / el.canvas.height;\n    let ratioMin = Math.floor(Math.min(ratioWidth, ratioHeight));\n    ratioMin = Math.max(1, ratioMin);\n    currentArtboardScale = ratioMin;\n    el.artboard.style.transform = `scale(${ratioMin})`;\n};\nwindow.addEventListener('resize', scaleCanvasToViewport);\n\nconst draw = function draw() {\n    const timeStart = Date.now();\n    const samples = SAMPLING ** 2;\n    const spacing = 1 / SAMPLING;\n    const start = spacing / 2;\n    const averagingBuffer = [[], [], []];\n    for (let i = 0; i < el.canvas.height; i++) {\n        for (let j = 0; j < el.canvas.width; j++) {\n            averagingBuffer[0] = averagingBuffer[1] = averagingBuffer[2] = 0;\n            let x = start;\n            let y = start;\n            for (let c = 0; c < samples; c++) {\n                const score = uiCircles.reduce((score, circle) => {\n                    return score + ((circle.r ** 1.2) /\n                        ((circle.x - j - x) ** 2 + (circle.y - i - y) ** 2));\n                }, 0);\n\n                const index = Math.min(10, Math.floor(\n                    //(score * 1.3 - 3) * 2 - 2\n                    score * 100\n                ));\n                averagingBuffer[0] += grades[index][0];\n                averagingBuffer[1] += grades[index][1];\n                averagingBuffer[2] += grades[index][2];\n\n                x += spacing;\n                if (x > 1) {\n                    x -= 1;\n                    y += spacing;\n                }\n            }\n\n            const average = [\n                Math.round(averagingBuffer[0] / samples),\n                Math.round(averagingBuffer[1] / samples),\n                Math.round(averagingBuffer[2] / samples),\n            ];\n            ctx.fillStyle = `rgb(${average[0]},${average[1]},${average[2]})`;\n            ctx.fillRect(j, i, 1, 1);\n        }\n    }\n    const timeEnd = Date.now();\n    const timeSeconds2DP = Math.round((timeEnd - timeStart) / 10) / 100;\n    console.log(`Completed in ${timeSeconds2DP} seconds.`);\n}\n\n// RUNTIME\n\nel.canvas.width = SCALE * 160;\nel.canvas.height = SCALE * 90;\nscaleCanvasToViewport();\n\nconst ctx = el.canvas.getContext('2d');\nctx.fillStyle = '#000';\nctx.fillRect(0, 0, el.canvas.width, el.canvas.height);\n\nconst circles = CIRCLES_PROTOTYPE.map(circlePrototype => ({\n    x: circlePrototype.x * SCALE,\n    y: circlePrototype.y * SCALE,\n    r: circlePrototype.r * SCALE,\n}));\n\nuiCircles.push(...CIRCLES_PROTOTYPE.map(circlePrototype =>\n    new Circle(\n        circlePrototype.x * SCALE,\n        circlePrototype.y * SCALE,\n        circlePrototype.r * SCALE,\n        el.artboardInterface)\n));\n\nconst grades = [\n    [   0,   0,   0 ],\n    [   0,  10, 255 ],\n    [ 255, 255, 255 ],\n    [   0,   0,   0 ],\n    [ 255,  20, 255 ],\n    [ 255, 255, 255 ],\n    [   0,   0,   0 ],\n    [ 255,  10,   0 ],\n    [ 255, 255, 255 ],\n    [   0,   0,   0 ],\n    [ 255, 255,  10 ],\n];\n\n/*\n'black', 'darkblue', 'blue', 'dodgerblue', 'cyan', 'limegreen', 'yellowgreen',\n'yellow', 'orange', 'red', 'maroon',\n*/\n\ndraw();\n"]}